package com.smallchill.web.controller;

import com.smallchill.core.plugins.dao.Blade;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.toolbox.Record;
import com.smallchill.core.toolbox.grid.JqGrid;
import com.smallchill.web.model.UserInfo;
import com.smallchill.web.service.UserInfoService;
import org.beetl.sql.core.kit.CaseInsensitiveHashMap;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.smallchill.common.base.BaseController;
import com.smallchill.core.toolbox.ajax.AjaxResult;
import com.smallchill.core.toolbox.kit.JsonKit;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;

/**
 * Generated by Blade.
 * 2016-10-18 09:47:31
 */
@Controller
@RequestMapping("/userInfo")
public class UserInfoController extends BaseController {
	private static String CODE = "userInfo";
	private static String PERFIX = "tb_user_info";
	private static String LIST_SOURCE = "UserInfo.list";
	private static String BASE_PATH = "/web/userInfo/";
	
	@Autowired
	UserInfoService userInfoService;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "userInfo.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "userInfo_view.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable String id, ModelMap mm) {
		UserInfo userInfo = userInfoService.findById(id);
		mm.put("model", JsonKit.toJson(userInfo));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "userInfo_view.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable String id, ModelMap mm) {
		UserInfo userInfo = userInfoService.findById(id);
		mm.put("model", JsonKit.toJson(userInfo));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "userInfo_view.html";
	}

	@ResponseBody
	@RequestMapping(KEY_LIST)
	public Object list() {
		JqGrid grid = (JqGrid)paginate(LIST_SOURCE);
		List<CaseInsensitiveHashMap> list = grid.getRows();

		//查询结果所有ID
		List<Integer> ids = new ArrayList<>();
		for (CaseInsensitiveHashMap map : list) {
			Integer id = (Integer) map.get("ID");
			ids.add(id);
		}
		getRequest().getSession().setAttribute("userInfoIds",ids);
		getRequest().getSession().setAttribute("userInfoNum",list.size());

		return grid;
	}

	@ResponseBody
	@RequestMapping(KEY_SAVE)
	public AjaxResult save() {
		UserInfo userInfo = mapping(PERFIX, UserInfo.class);
		boolean temp = userInfoService.save(userInfo);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_UPDATE)
	public AjaxResult update() {
		UserInfo userInfo = mapping(PERFIX, UserInfo.class);
		boolean temp = userInfoService.update(userInfo);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@ResponseBody
	@RequestMapping(KEY_REMOVE)
	public AjaxResult remove(@RequestParam String ids) {
		int cnt = userInfoService.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}


	//跳转改变组织状态页面
	@RequestMapping("/banned")
	public String banned(ModelMap mm,Integer id,Integer status) {
		mm.put("id", id);
		mm.put("status", status);
		return BASE_PATH +"userInfo_banned.html";
	}


	//改变组织状态(封/解)
	@ResponseBody
	@RequestMapping(value = "/setBanned")
	public AjaxResult setBanned(Integer id, Integer bannedTime ,String content,Integer status){
		try{
			userInfoService.banned(id,bannedTime,content,status);
		}catch (RuntimeException e){
			return error(SAVE_FAIL_MSG);
		}
		return success(SAVE_SUCCESS_MSG);
	}

	//消息发送页面(单发)
	@RequestMapping("/message" + "/{id}")
	public String userMessages(ModelMap mm,@PathVariable String id) {
		UserInfo userInfo = userInfoService.findById(id);
		mm.put("userInfo", userInfo);
		mm.put("userInfoNum", 0);
		mm.put("code", CODE);
		return BASE_PATH + "userInfo_message.html";
	}

	//消息发送页面(群发)
	@RequestMapping("/message")
	public String _userMessages(ModelMap mm,HttpServletRequest request) {
		UserInfo userInfo = new UserInfo();
		mm.put("userInfoNum", request.getSession().getAttribute("userInfoNum"));
		mm.put("userInfo", userInfo);
		mm.put("code", CODE);
		return BASE_PATH + "userInfo_message.html";
	}

	//消息发送
	@ResponseBody
	@RequestMapping("/send_message")
	public AjaxResult sendMessage(HttpServletRequest request,String userInfoId,Integer send,String sendTime,String title,String content) {
		try{
			userInfoService.sendMessage(request,userInfoId,send,sendTime,title,content);
		}catch (RuntimeException e){
			e.printStackTrace();
			return error(SEND_FAIL_MSG);
		}
		return success(SEND_SUCCESS_MSG);

	}


	//内容发送页面
	@RequestMapping(value = "/content")
	public String _userContent(ModelMap mm,HttpServletRequest request) {
		UserInfo userInfo = new UserInfo();
		mm.put("userInfoNum", request.getSession().getAttribute("userInfoNum"));
		mm.put("userInfo", userInfo);
		mm.put("code", CODE);
		return BASE_PATH + "userInfo_content.html";
	}
}
