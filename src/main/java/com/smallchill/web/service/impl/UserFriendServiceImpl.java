package com.smallchill.web.service.impl;

import com.smallchill.api.function.meta.other.Convert;
import com.smallchill.api.function.modal.vo.UserVo;
import com.smallchill.api.function.service.UserFriendGroupingService;
import com.smallchill.core.plugins.dao.Blade;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.toolbox.Record;
import com.smallchill.core.toolbox.kit.CollectionKit;
import com.smallchill.web.model.UserApproval;
import com.smallchill.web.model.UserFriend;
import com.smallchill.web.service.AugService;
import com.smallchill.web.service.UserApprovalService;
import com.smallchill.web.service.UserFriendService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.smallchill.core.base.service.BaseService;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * Generated by Blade.
 * 2016-10-31 13:30:46
 */
@Service
public class UserFriendServiceImpl extends BaseService<UserFriend> implements UserFriendService {

    @Autowired
    private UserApprovalService userApprovalService;

    @Autowired
    private AugService augService;
    @Autowired
    private UserFriendGroupingService userFriendGroupingService;

    @Override
    public void proessFriend(UserFriend uf) {
    }

    /**
     * 添加好友
     * 如果好友记录不为空，则修改状态
     *
     * @param uf 用户好友记录
     */
    @Transactional
    @Override
    public void addFriend(UserFriend uf) {
        UserFriend dict = this.getByUserIdAndFriendId(uf);
        if (dict != null) {
            dict.setStatus(0);
            this.update(dict);
            this.updateFriend(dict, 0);
        } else {
            uf.setStatus(0);
            uf.setType(1);
            this.save(uf);
            this.saveFriend(uf);
        }
    }


    /**
     * 删除好友
     * 逻辑删除
     *
     * @param uf 好友信息
     */
    @Transactional
    @Override
    public void delFriend(UserFriend uf) {
        this.clearFriend(uf);
        UserApproval ua = new UserApproval();
        ua.setFromUserId(uf.getUserId());
        ua.setToUserId(uf.getFriendId());
        userApprovalService.resetStatus(ua);
        delAug(uf.getFriendId(), uf.getUserId());
        delAcquaintancesLabel(uf.getUserId(), uf.getFriendId());
        userFriendGroupingService.deleteMemberForDelFriend(uf.getUserId(), uf.getFriendId());
    }

    /**
     * 删除熟人标签
     * @param userId q当前用户ID
     */
    public void delAcquaintancesLabel(Integer userId, Integer friendId) {
        List<UserFriend> list = this.findBy("(user_id = #{userId} and friend_id = #{friendId}) or (user_id = #{friendId} and friend_id = #{userId})" +
                " and label LIKE CONCAT('%','熟人','%') ",
                Record.create().set("userId", userId).set("friendId", friendId));
        for (UserFriend uf : list) {
            uf.setLabel(uf.getLabel() != null ? uf.getLabel().replace("熟人","") : "");
            this.update(uf);
        }
    }

    /**
     * 删除同组织标签
     * @param userId 当前用户ID
     */
    @Override
    public void delGroupLabel(Integer userId, Integer groupId) {
        String sql = "SELECT * FROM tb_user_friend uf LEFT JOIN tb_user_group ug ON uf.`friend_id` = ug.`user_id`" +
                " AND ug.`group_id` = #{groupId} WHERE uf.`user_id` = #{userId} AND uf.`label` LIKE CONCAT('%','同组织','%')";
        List<UserFriend> ufList = this.find(sql, Record.create().set("userId", userId).set("groupId", groupId));
        for (UserFriend uf : ufList) {
            uf.setLabel(uf.getLabel() != null ? uf.getLabel().replace("同组织","") : "");
            this.update(uf);
        }
    }

    /**
     * 删除熟人
     *
     * @param uf
     */
    @Transactional
    @Override
    public void delAcquaintances(UserFriend uf) {
        // 修改tb_user_friend 状态
        // 修改 tb_user_approval 状态
        List<UserApproval> uaList = userApprovalService.findByFromUserIdAndToUserIdTwoWay(uf.getUserId(), uf.getFriendId());
        List<UserFriend> ufList = this.findBy("(user_id = #{userId} and friend_id = #{friendId}) or (user_id = #{friendId} and friend_id = #{userId})",
                Record.create().set("userId", uf.getUserId()).set("friendId", uf.getFriendId()));
        updateUaListStatus(uaList);
        updateUfListStatus(ufList);
        delAug(uf.getFriendId(), uf.getUserId());
        delAcquaintancesLabel(uf.getUserId(), uf.getFriendId());
    }

    private void updateUfListStatus(List<UserFriend> ufList) {
        if (CollectionKit.isNotEmpty(ufList)) {
            for (UserFriend uf : ufList) {
                uf.setType(1);
                this.update(uf);
            }
        }
    }

    private void updateUaListStatus(List<UserApproval> uaList) {
        if (CollectionKit.isNotEmpty(uaList)) {
            for (UserApproval ua : uaList) {
                ua.setType(1);
                ua.setStatus(2);
                userApprovalService.update(ua);
            }
        }
    }


    @Override
    public void blank(UserFriend uf) {
        this.clearFriend(uf);
    }


    private void clearFriend(UserFriend uf) {
        String where = "user_id = #{userId} and friend_id = #{friendId}";
        Record record = Record.create();
        record.put("userId", uf.getUserId());
        record.put("friendId", uf.getFriendId());
        this.deleteBy(where, record);

        record.put("friendId", uf.getUserId());
        record.put("userId", uf.getFriendId());
        // 修改审核信息状态
        this.deleteBy(where, record);

    }


    @Override
    public UserFriend getByUserIdAndFriendId(UserFriend uf) {
        String sql = "user_id = #{userId} and friend_id = #{friendId}";
        Record record = Record.create();
        record.put("userId", uf.getUserId());
        record.put("friendId", uf.getFriendId());
        return this.findFirstBy(sql, record);
    }

    @Override
    public void saveFriend(UserFriend uf) {
        UserFriend _friend = new UserFriend();
        _friend.setUserId(uf.getFriendId());
        _friend.setFriendId(uf.getUserId());
        _friend.setType(uf.getType());
        _friend.setStatus(0);
        this.save(_friend);
    }

    @Override
    public void updateFriend(UserFriend uf, int status) {
        UserFriend _friend = new UserFriend();
        _friend.setUserId(uf.getFriendId());
        _friend.setFriendId(uf.getUserId());

        _friend = this.getByUserIdAndFriendId(_friend);
        _friend.setStatus(status);
        this.update(_friend);
    }

    /**
     * 查看朋友的熟人
     *
     * @param userId   用户ID
     * @param toUserId 目标用户ID
     * @return uservos
     */
    @Override
    public List<UserVo> findAcquaintancesByUserId(Integer userId, Integer toUserId) {

        String sql = Blade.dao().getScript("UserFriend.findAcquaintancesByUserId").getSql();
        List<Record> list = Db.init().selectList(sql, Record.create().set("userId", userId).set("toUserId", toUserId));
        List<UserVo> voList = new ArrayList<>();
        UserVo vo;
        int type = 0;
        for (Record record : list) {
            vo = Convert.recordToVo(record);
            Integer fromUserId = record.getInt("from_user_id");
            Integer toUserId2 = record.getInt("to_user_id");
            Integer status = record.get("status") == null ? null : Integer.parseInt(record.get("status").toString());
            if (status != null && status == 0) {
                if (fromUserId == userId) {
                    // 等待对方审核
                    type = Convert.NOT_PROCESS_TO_USER_ID;
                } else if (toUserId2 == userId) {
                    // 等待己方审核
                    type = Convert.NOT_PROCESS_FROM_USER_ID;
                }
            } else if (status != null && status == 1) {
                type = Convert.FRIEND;
            } else if (status != null && (status == 2 || status == 4)) {
                type = Convert.PASS;
            }
            vo.setStatus(type);
            voList.add(vo);
        }
        return voList;
    }

    @Override
    public void delAug(Integer fromUserId, Integer toUserId) {
        augService.deleteBy("(from_user_id = #{fromUserId} and to_user_id = #{toUserId}) OR (from_user_id = #{toUserId} and to_user_id = #{fromUserId})",
                Record.create().set("fromUserId", fromUserId).set("toUserId", toUserId));
    }
}