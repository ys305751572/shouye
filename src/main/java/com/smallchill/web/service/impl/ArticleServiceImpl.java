package com.smallchill.web.service.impl;

import com.qiniu.util.StringMap;
import com.smallchill.api.function.meta.consts.StatusConst;
import com.smallchill.api.function.meta.other.ArticleConvert;
import com.smallchill.api.function.modal.Shielding;
import com.smallchill.api.function.modal.vo.ArticleVo;
import com.smallchill.api.function.modal.vo.UserVo;
import com.smallchill.api.function.service.ShieldingService;
import com.smallchill.api.function.service.impl.ShouPageServiceImpl;
import com.smallchill.core.plugins.dao.Blade;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.toolbox.Record;
import com.smallchill.core.toolbox.kit.CollectionKit;
import com.smallchill.core.toolbox.kit.DateTimeKit;
import com.smallchill.core.toolbox.kit.UploadKit;
import com.smallchill.web.model.*;
import com.smallchill.web.service.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.smallchill.core.base.service.BaseService;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartRequest;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;


/**
 * 文章service
 * Generated by yesong.
 * 2017-01-11 14:36:12
 */
@Service
public class ArticleServiceImpl extends BaseService<Article> implements ArticleService, StatusConst {

    @Autowired
    private ArticleShowService articleShowService;
    @Autowired
    private MaganizeService maganizeService;
    @Autowired
    private DailyService dailyService;
    @Autowired
    private ShieldingService shieldingService;
    @Autowired
    private GroupService groupService;
    @Autowired
    private UserInfoService userInfoService;

    /**
     * 机遇列表
     *
     * @param userId 当前用户ID
     * @return list
     */
    @Override
    public List<ArticleVo> listByUserId(Integer userId) {
        String sql = Blade.dao().getScript("Acticle.listByUserId").getSql();
        List<Record> list = Db.init().selectList(sql, Record.create().set("userId", userId));
        return ArticleConvert.recordsToArticleVos(list);
    }

    @Transactional
    @Override
    public void create(Article article, Integer userId, MultipartRequest multipartRequest, String obj) {
        // 创建文章
        article.setFromId(userId);
        Integer lastActicleId = createActicle(article, multipartRequest);
        String[] objs = obj.split("\\|", 3);
        if (StringUtils.isNotBlank(objs[0])) {
            contributeToMyFriend(lastActicleId, userId, objs[0]);
            contributeToInterested(lastActicleId, userId, objs[0]);
            contributeToIntereste(lastActicleId, userId, objs[0]);
        }
        if (StringUtils.isNotBlank(objs[2])) {
            // 投稿到杂志
            contributeToMagazine(lastActicleId, objs[2]);
        }
        if (StringUtils.isNotBlank(objs[1])) {
            // 投稿到日报
            contributeToDaily(lastActicleId, objs[1]);
        }
    }

    /**
     * 投稿给我的好友
     *
     * @param lastActicleId
     * @param userId
     * @param obj
     */
    private void contributeToMyFriend(Integer lastActicleId, Integer userId, String obj) {
        if (obj.contains("1")) {
            // 查询朋友
            List<Integer> list1 = friend(userId);
            filterShielding(list1, userId);
            contribute(lastActicleId, userId, list1, ARTICLE_SHOW_FRIEND, ARTICLE_FROM_TYPE_PEPOLE);
        }
    }

    /**
     * 投稿给我感兴趣的人
     *
     * @param lastActicleId
     * @param userId
     * @param obj0
     */
    private void contributeToIntereste(Integer lastActicleId, Integer userId, String obj0) {
        if (obj0.contains("2")) {
            // 查询对我感兴趣的人
            List<Integer> list2 = listInterested(userId);
            filterShielding(list2, userId);
            contribute(lastActicleId, userId, list2, ARTICLE_SHOW_INTERESTED, ARTICLE_FROM_TYPE_PEPOLE);
        }
    }

    /**
     * 投稿到对我感兴趣的人
     *
     * @param lastActicleId
     * @param userId
     * @param obj0
     */
    private void contributeToInterested(Integer lastActicleId, Integer userId, String obj0) {
        if (obj0.contains("3")) {
            // 查询我感兴趣的人
            List<Integer> list3 = listIntereste(userId);
            filterShielding(list3, userId);
            contribute(lastActicleId, userId, list3, ARTICLE_SHOW_INTEREST, ARTICLE_FROM_TYPE_PEPOLE);
        }
    }

    @Override
    public List<Integer> friend(Integer userId) {
        String sql = "select friend_id userId from tb_user_friend where user_id = #{userId}";
        List<Record> friends = Db.init().selectList(sql, Record.create().set("userId", userId));
        List<Integer> voList = new ArrayList<>();
        for (Record record : friends) {
            voList.add(record.getInt("userId"));
        }
        return voList;
    }

    @Override
    public List<Integer> listInterested(Integer userId) {

        String sql = "select user_id userId from tb_interest_user where to_user_id = #{userId}";
        List<Record> list = Db.init().selectList(sql,
                Record.create().set("userId", userId));
        List<Integer> voList = new ArrayList<>();
        for (Record record : list) {
            voList.add(record.getInt("userId"));
        }
        return voList;
    }

    @Override
    public List<Integer> listIntereste(Integer userId) {

        String sql = "select to_user_id userId from tb_interest_user where user_id = #{userId}";
        List<Integer> voList = new ArrayList<>();
        List<Record> userList = Db.init().selectList(sql, Record.create().set("userId", userId));
        for (Record user : userList) {
            voList.add(user.getInt("userId"));
        }
        return voList;
    }


    /**
     * 分享到关系用户
     *
     * @param lastActicleId 最后文章ID
     */
    @Override
    public void contribute(Integer lastActicleId, Integer userId, List<Integer> userIds, int type, int fromType) {
        ArticleShow articleShow;
        for (Integer _userId : userIds) {
            articleShow = createArticleShowBean(lastActicleId, userId, _userId, type, fromType);
            articleShowService.save(articleShow);
        }
    }

    /**
     * 分享到关系用户
     *
     * @param lastActicleId 最后文章ID
     */
    public void contribute(Integer lastActicleId, Integer userId, List<Integer> userIds, int type, int fromType, int shareId) {
        ArticleShow articleShow;
        for (Integer _userId : userIds) {
            articleShow = createArticleShowBean(lastActicleId, userId, _userId, type, fromType, shareId);
            articleShowService.save(articleShow);
        }
    }

    /**
     * 查询用户发布
     *
     * @param userId 当前用户ID
     * @return list
     */
    @Override
    public List<ArticleVo> findByUserId(Integer userId) {
        String sql = Blade.dao().getScript("Acticle.publishListByUserId").getSql();
        List<Record> records = Db.init().selectList(sql, Record.create().set("userId", userId));
        return ArticleConvert.publishToArticleVos(records);
    }

    /**
     * 创建文章
     *
     * @param article          文章内容
     * @param multipartRequest 文件
     */
    private Integer createActicle(Article article, MultipartRequest multipartRequest) {
        article.setInterestQuantity(0);
        article.setReadingQuantity(0);
        article.setForwardingQuantity(0);
        article.setFromType(ARTICLE_FROM_TYPE_PEPOLE);
        article.setCreateTime(DateTimeKit.nowLong());
        int articleId = saveRtId(article);
        String cover = uploadImage(multipartRequest, articleId);
        updateBy("cover = #{cover}", "id = #{articleId}", Record.create().set("cover", cover).set("articleId", articleId));
        return articleId;
    }

    /**
     * 上传图片
     *
     * @param multipartRequest 文件
     */
    private String uploadImage(MultipartRequest multipartRequest, Integer articleId) {
        Map<String, MultipartFile> map = multipartRequest.getFileMap();
        String firstUrl = "";
        for (Map.Entry<String, MultipartFile> entity : map.entrySet()) {
            MultipartFile file = entity.getValue();
            StringMap resultMap = UploadKit.upload(UploadKit.changeFile(file));
            String url = UploadKit.domain + resultMap.get("key");
            Db.init().insert("insert into tb_article_image(article_id, url) values (#{articleId}, #{url})",
                    Record.create().set("articleId", articleId).set("url", url));
            firstUrl = url;
        }
        return firstUrl;
    }

    /**
     * 投稿到杂志
     *
     * @param lastActicleId 文章ID
     * @param obj           选择的杂志ID
     */
    @Override
    public void contributeToMagazine(Integer lastActicleId, String obj) {
        String[] idss = obj.split(",");
        try {
            Maganize maganize;
            for (String toId : idss) {
                maganize = new Maganize();
                maganize.setArticleId(lastActicleId);
                maganize.setType(ARTICLE_FROM_TYPE_PEPOLE);
                maganize.setMagazineId(Integer.parseInt(toId));
                maganize.setStatus(ARTICLE_NOT_PROCESS);
                maganize.setCreateTime(DateTimeKit.nowLong());
                maganizeService.save(maganize);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 投稿到日报
     */
    @Override
    public void contributeToDaily(Integer lastActicleId, String obj) {
        String[] idss = obj.split(",");
        Daily daily;
        try {
            for (String toId : idss) {
                daily = new Daily();
                daily.setArticleId(lastActicleId);
                daily.setCreateTime(DateTimeKit.nowLong());
                daily.setStatus(ARTICLE_NOT_PROCESS);
                daily.setType(ARTICLE_FROM_TYPE_PEPOLE);
                daily.setGroupId(Integer.parseInt(toId));
                dailyService.save(daily);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * 删除文章
     *
     * @param id     文章ID
     * @param userId 当前用户ID
     */
    @Transactional
    @Override
    public void deleteById(Integer id, Integer userId) {
        deleteArticleShow(id);
        deleteDailyAndMagazine(id);
        delete(id);
    }

    private void deleteDailyAndMagazine(Integer id) {
        Record record = Record.create().set("articleId", id);
        String sql = "article_id = #{articleId}";
        maganizeService.deleteBy(sql, record);
        dailyService.deleteBy(sql, record);
    }

    /**
     * 文章详情
     *
     * @param id 文章ID
     * @return 文章详情
     */
    @Override
    public ArticleVo detail(Integer id, Integer userId, Integer authorId, Integer authorType) {
        String sql = Blade.dao().getScript("Acticle.findById").getSql();
        Record record = Db.init().selectOne(sql, Record.create().set("id", id));

        List<Record> urlList = Db.init().selectList("select url from tb_article_image ai where ai.article_id = #{id}",
                Record.create().set("id", id));

        List<String> urls = new ArrayList<>();
        if (CollectionKit.isNotEmpty(urlList)) {
            for (Record record1 : urlList) {
                urls.add(record1.getStr("url"));
            }
        }
        ArticleVo vo = ArticleConvert.articleDetailToArticleVo(record);
        vo.setUrls(urls);
        int fromId = record.getInt("from_id");
        int fromType = record.getInt("from_type");

        String s1 = "select is_intereste from tb_article_show as1 where as1.article_id = #{articleId} " +
                "AND to_id = #{userId} AND from_id = #{fromId} AND from_type = #{fromType}";
        Record r1 = Db.init().selectOne(s1, Record.create().set("userId", userId).set("articleId", id)
                .set("fromId", authorId).set("fromType", authorType));
        vo.setIsInterest(1);

        if (r1 != null && r1.getInt("is_intereste") == 2) {
            vo.setIsInterest(2);
        } else if (r1 != null && r1.getInt("is_intereste") == 3) {
            vo.setIsInterest(3);
        }

        String s2 = "select is_intereste from tb_activity_interest ai where ai.article_id = #{articleId} AND ai.user_id = #{userId}";
        Record r2 = Db.init().selectOne(s2, Record.create().set("articleId", id).set("userId", userId));

        if (r2 != null && r2.getInt("is_intereste") == 1) {
            vo.setIsInterest(2);
        } else if (r2 != null && r2.getInt("is_intereste") == 2) {
            vo.setIsInterest(3);
        }
        if (fromType == 1) {
            if (fromId == userId) {
                vo.setMine(1);
            }
            UserInfo userInfo = userInfoService.findByUserId(fromId);
            vo.setAuthor(userInfo.getUsername());
            if (authorType == 2) {
                // 日报
                Group group = groupService.findById(authorId);
                vo.setGroupId(authorId);
                vo.setGroupname(group.getName());
                vo.setAuthorType(2);
            } else if (authorType == 4) {
                // 杂志
                String sql2 = "SELECT mi.name magazinename,g.id,g.`name` groupname FROM `tb_magazine_info` mi " +
                        "LEFT JOIN tb_group g ON mi.`group_id` = g.id WHERE mi.`id` = #{id}";
                Record record1 = Db.init().selectOne(sql2, Record.create().set("id", authorId));
                vo.setGroupId(record1.getInt("id"));
                vo.setGroupname(record1.getStr("groupname"));
                vo.setMagazineId(authorId);
                vo.setMaganzinename(record1.getStr("magazinename"));
                vo.setAuthorType(4);
            }
        } else if (fromType == 2) {
            vo.setMine(2);
            Group group = groupService.findById(fromId);
            vo.setGroupId(fromId);
            vo.setGroupname(group.getName());
            vo.setAuthorType(2);
        } else if (fromType == 4) {
            // 杂志
            String sql2 = "SELECT mi.name magazinename,g.id,g.`name` groupname FROM `tb_magazine_info` mi " +
                    "LEFT JOIN tb_group g ON mi.`group_id` = g.id WHERE mi.`id` = #{id}";
            Record record1 = Db.init().selectOne(sql2, Record.create().set("id", fromId));
            vo.setGroupId(record1.getInt("id"));
            vo.setGroupname(record1.getStr("groupname"));
            vo.setMagazineId(fromId);
            vo.setMaganzinename(record1.getStr("magazinename"));
            vo.setAuthorType(4);
        }
        //  增加阅读量
        addReadCount(id);
        return vo;
    }

    private void deleteArticleShow(Integer id) {
        articleShowService.deleteBy("article_id = #{articleId}", Record.create().set("articleId", id));
    }

    private ArticleShow createArticleShowBean(Integer articleId, Integer fromUserId, Integer toId, Integer type, Integer fromType) {
        ArticleShow articleShow = new ArticleShow();
        articleShow.setType(type);
        articleShow.setFromId(fromUserId);
        articleShow.setIsIntereste(ARTICLE_SHOW_NOMAL_TYPE);
        articleShow.setFromType(fromType);
        articleShow.setArticleId(articleId);
        articleShow.setCreateTime(DateTimeKit.nowLong());
        articleShow.setToId(toId);
        return articleShow;
    }

    private ArticleShow createArticleShowBean(Integer articleId, Integer fromUserId, Integer toId, Integer type, Integer fromType, Integer share) {
        ArticleShow articleShow = createArticleShowBean(articleId, fromUserId, toId, type, fromType);
        articleShow.setShareId(share);
        return articleShow;
    }

    /**
     * 新增阅读数量
     *
     * @param articleId 文章ID
     */
    public void addReadCount(int articleId) {
        updateBy("reading_quantity = reading_quantity + 1", "id = #{id}", Record.create().set("id", articleId));
    }

    /**
     * 新增感兴趣数量
     *
     * @param articleId 文章ID
     */
    public void addInterestCount(int articleId) {
        updateBy("interest_quantity = interest_quantity + 1", "id = #{id}", Record.create().set("id", articleId));
    }

    /**
     * 减少感兴趣数量
     *
     * @param articleId 文章ID
     */
    public void subtractInterestCount(int articleId) {
        updateBy("interest_quantity = interest_quantity - 1", "id = #{id}", Record.create().set("id", articleId));
    }

    @Override
    public void share(int articleId, int userId, String toUserIds) {
        String[] toUserIdss = toUserIds.split(",");
        List<Integer> list = new ArrayList<>();
        for (String toUserId : toUserIdss) {
            list.add(Integer.parseInt(toUserId));
        }
        contribute(articleId, userId, list, ARTICLE_SHOW_SHARE, ARTICLE_FROM_TYPE_PEPOLE, userId);
        addShareCount(articleId);
    }

    /**
     * 新增分享数量
     *
     * @param articleId 文章ID
     */
    public void addShareCount(int articleId) {
        updateBy("forwarding_quantity = forwarding_quantity + 1", "id = #{id}", Record.create().set("id", articleId));
    }

    @Override
    public List<ArticleVo> listInterest(Integer userId) {
        return null;
    }

    @Override
    public List<ArticleVo> listUnInterest(Integer userId) {
        return null;
    }

    /**
     * 过滤屏蔽掉的用户ID
     *
     * @param ids
     * @param userId
     */
    @Override
    public void filterShielding(List<Integer> ids, Integer userId) {
        List<Shielding> list = shieldingService.findBy(" from_id = #{fromId} AND type = 1", Record.create().set("fromId", userId));
        for (Shielding shielding : list) {
            if (ids.contains(shielding.getUserId())) {
                ids.remove(shielding.getUserId());
            }
        }
    }
}
