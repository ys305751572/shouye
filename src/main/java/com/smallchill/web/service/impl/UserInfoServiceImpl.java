package com.smallchill.web.service.impl;

import com.smallchill.api.common.exception.UserExitsException;
import com.smallchill.api.common.exception.UserIsNotManagerException;
import com.smallchill.api.function.meta.consts.StatusConst;
import com.smallchill.api.function.meta.consts.SystemConst;
import com.smallchill.api.function.meta.consts.TextConst;
import com.smallchill.api.function.meta.other.ButtonRegister;
import com.smallchill.api.function.meta.other.Convert;
import com.smallchill.api.function.modal.*;
import com.smallchill.api.function.modal.vo.*;
import com.smallchill.api.function.service.*;
import com.smallchill.core.base.service.BaseService;
import com.smallchill.core.plugins.dao.Blade;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.shiro.ShiroKit;
import com.smallchill.core.toolbox.Record;
import com.smallchill.core.toolbox.kit.CollectionKit;
import com.smallchill.core.toolbox.kit.DateTimeKit;
import com.smallchill.core.toolbox.kit.NetKit;
import com.smallchill.platform.model.UserLogin;
import com.smallchill.platform.service.UserLoginService;
import com.smallchill.web.model.*;
import com.smallchill.web.service.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;


/**
 * Generated by Blade.
 * 2016-10-18 09:47:31
 */
@Service
public class UserInfoServiceImpl extends BaseService<UserInfo> implements UserInfoService, TextConst, StatusConst, SystemConst {

    @Autowired
    private UserDomainService userDomainService;

    @Autowired
    private UserLoginService userLoginService;

    @Autowired
    private UserprofessionalService userprofessionalService;

    @Autowired
    private UserApprovalService userApprovalService;
    @Autowired
    private UserFriendService userFriendService;
    @Autowired
    private UserInterestService userInterestService;
    @Autowired
    private GroupInterestService groupInterestService;
    @Autowired
    private GroupUserRecordService groupUserRecordService;

    @Autowired
    private UserFriendGroupingService userFriendGroupingService;

    @Autowired
    private UserGroupService userGroupService;
    @Autowired
    private UfgmService ufgmService;
    @Autowired
    private MessageService messageService;

    @Autowired
    private UserCareerService userCareerService;
    @Autowired
    private AugService augService;
    @Autowired
    private UserInfoExtendService userInfoExtendService;
    @Transactional
    @Override
    public UserInfo updateUserInfo(UserInfo userInfo, HttpServletRequest request) throws UserExitsException {

        String domain = userInfo.getDomain();
        String pro = userInfo.getProfessional();
        String career = userInfo.getCareer();
        String provinceCity = userInfo.getProvinceCity();
        if (StringUtils.isNotBlank(provinceCity)) {
            String[] citys = provinceCity.split("-");
            if (citys.length == 2) {
                userInfo.setProvinceCity(citys[1]);
            }
        }
        int per = per(userInfo);
        userInfo.setPer(per);
        domainAndProfessional(userInfo);
        List<Integer> careerIds = processCareer(career, userInfo);
        if (userInfo.getUserId() != null) {
            _update(userInfo);
        } else {
            if (userLoginService.userIfExtis(userInfo.getMobile())) {
                throw new UserExitsException();
            }
            // 新建userlogin信息
            int userId = createUserLogin(userInfo, request);
            userInfo.setUserId(userId);
            _save(userInfo);
        }
        userInfo.setDomain(domain);
        userInfo.setProfessional(pro);
        userInfo.setCareer(career);
        processUserInfo(userInfo, careerIds);
        // 新增用户默认分组
        // createDefaultGrouping(userInfo.getUserId());

        return userInfo;
    }

    private List<Integer> processCareer(String career, UserInfo userinfo) {
        StringBuffer nameBuffer = new StringBuffer();
        List<Integer> ids = new ArrayList<>();
        if (StringUtils.isNotBlank(career)) {
            String[] careerss = career.split("\\|");
            for (String c : careerss) {
                if (StringUtils.isNotBlank(c)) {
                    String[] cc = c.split(",");
                    nameBuffer.append(cc[1]).append("/");
                    ids.add(Integer.parseInt(cc[0]));
                }
            }
        }
        userinfo.setCareer(nameBuffer.substring(0, nameBuffer.length() - 1));
        return ids;
    }

    /**
     * 查询用户详细信息
     *
     * @param userId 用户ID
     * @return 用户信息
     */
    @Override
    public UserInfo findByUserId(int userId) {
        return this.findFirstBy("where user_id = #{userId}", Record.create().set("userId", userId));
    }

    @Override
    public List<Record> findByParmas(Record params) {
        String sql = Blade.dao().getScript("UserInfo.listPage").getSql();
        return Db.init().selectList(sql, params);
    }

    @Override
    public Record findUserInfoDetail(Integer userId) {
        String sql = Blade.dao().getScript("UserInfo.userInfoDetail").getSql();
        return Db.init().selectOne(sql, Record.create().set("userId", userId));
    }

    /**
     * 查询个人信息编辑页
     *
     * @param userId 当前用户ID
     * @return uservo
     */
    @Override
    public UserVo findUserinfo(Integer userId) {
        Record record = this.findUserInfoDetail(userId);
        UserVo userVo = Convert.recordToVo(record);
        userVo.setAgeId(record.getInt("age_interval_id"));
        userVo.setAge(record.getStr("age"));
        userVo.setGender(record.getInt("gender"));
        userVo.setProvince(record.getInt("province"));
        userVo.setCity(record.getInt("city"));
        userVo.setOrgIsOpen(record.getInt("org_is_open"));
        userVo.setOrgType(record.getInt("org_type"));
        userVo.setProductType(record.getInt("product_type"));
        userVo.setProductServiceName(record.getStr("product_service_name"));
        userVo.setZy(record.getStr("zy"));
        userVo.setZy2(record.getStr("zy2"));
        userVo.setSc(record.getStr("sc"));
        userVo.setZl(record.getStr("zl"));
        userVo.setIndustryRanking(record.getStr("industry_ranking"));
        userVo.setQualification(record.getStr("qualification"));
        // 查询用户事业状态
        // 查询用户专业
        // 查询用户行业领域
        String where = "user_id = #{userId}";
        Record paramsRecord = Record.create().set("userId", userId);
        List<UserProfessional> professionalList = userprofessionalService.findBy(where, paramsRecord);
        List<UserDomain> userDomainList = userDomainService.findBy(where, paramsRecord);
        List<Record> userinfoCareerList = userCareerService.findCareerByUserId(userId);
        userVo.setProfessionalList(professionalList);
        userVo.setUserDomainList(userDomainList);
        userVo.setUserinfoCareerList(userinfoCareerList);
        return userVo;
    }


    @Override
    public UserVo findUserInfoDetail(Integer userId, Integer toUserId, Integer groupId) {
        String sql = Blade.dao().getScript("UserInfo.userInfoDetail").getSql();
        Record record = Db.init().selectOne(sql, Record.create().set("userId", toUserId));

        UserVo vo = Convert.recordToVo(record);
        UserApproval ua = userApprovalService.getUserByFromUserIdAndToUserIdApprovalOfOneWay(userId, toUserId);
        UserInterest ui = userInterestService.getByUserId(userId, toUserId);
        Aug aug = augService.findFirstBy("from_user_id = #{userId} and to_user_id = #{toUserId}",
                Record.create().set("userId", userId).set("toUserId", toUserId));
        int count = userGroupService.count("user_id = #{userId} and group_id = #{groupId}",
                Record.create().set("userId", userId).set("groupId", groupId));

        List<Button> list = ButtonRegister.create(userId, toUserId, ua, ui, aug, count > 0).addBtns();
        List<String> sameKeyList = new ArrayList<>();
        vo.setBtnList(list);
        vo.setSameKeyList(sameKeyList);


        if (ua != null && ua.getStatus() == 2) {
            vo.setMobile(record.getStr("mobile"));
            vo.setType(ua.getType());
        } else {
            vo.setMobile("");
            vo.setType(0);
        }

        vo.setStatus(Convert.NOT_FRINED);
        Integer istatus = (ui == null ? null : ui.getStatus());
        if (istatus != null && istatus == 0) {
            vo.setStatus(Convert.INTEREST);
        } else {
            vo.setStatus(Convert.UN_INTEREST);
        }
        record.set("status", ua == null ? null : ua.getStatus());
        record.set("type", ua == null ? null : ua.getType());
        Convert.setUserVoStatus(vo, record, userId);
        vo.setUserExtendVo(findUserExtendVo(record));
        if (groupId != null) {
            saveGroupUserRecord(userId, toUserId, groupId);
        }
        return vo;
    }

    /**
     * 保存组织用户查询历史记录
     *
     * @param toUserId 被查询用户ID
     * @param groupId  组织ID
     */
    private void saveGroupUserRecord(Integer userId, Integer toUserId, Integer groupId) {
        GroupUserRecord gur = new GroupUserRecord();
        gur.setGroupId(groupId);
        gur.setUserId(userId);
        gur.setToUserId(toUserId);
        gur.setCreateTime(DateTimeKit.nowLong());
        groupUserRecordService.save(gur);
    }

    /**
     * 根据ID查询用户名
     *
     * @param userId 用户ID
     * @return 用户名
     */
    @Override
    public String findUsernameByUserId(Integer userId) {
        String sql = "select username from tb_user_info where user_id = #{userId}";
        UserInfo userInfo = this.findFirst(sql, Record.create().set("userId", userId));
        return userInfo.getUsername();
    }

    /**
     * @param record
     * @return UserExtendVo
     */
    @Override
    public UserExtendVo findUserExtendVo(Record record) {
        UserExtendVo userExtendVo = new UserExtendVo();
        String where = "user_id = #{userId}";
        Record paramsRecord = Record.create().set("userId", record.getInt("userId"));
        List<UserProfessional> professionalList = userprofessionalService.findBy(where, paramsRecord);
        StringBuffer professional = new StringBuffer();
        for (UserProfessional upf : professionalList) {
            if (StringUtils.isNotBlank(upf.getLevel())) {
                professional.append("[");
                professional.append(upf.getLevel());
                professional.append("]");
            }
            professional.append(upf.getProName());
            professional.append("+");
        }

        StringBuffer userDesc = new StringBuffer();
        userDesc.append(record.getInt("gender") == 2 ? "男" : "女");
        userDesc.append("<br>");
        userDesc.append(record.getStr("age"));
        userDesc.append("<br>");
        if (StringUtils.isNotBlank(professional)) {
            userDesc.append(professional.substring(0, professional.length() - 1));
            userDesc.append("<br>");
        }
        if (StringUtils.isNotBlank(record.getStr("zy"))) {
            userDesc.append("[专业]").append(record.getStr("zy"));
            userDesc.append("<br>");
        }
        if (StringUtils.isNotBlank(record.getStr("sc"))) {
            userDesc.append("[擅长]").append(record.getStr("sc"));
            userDesc.append("<br>");
        }
        if (StringUtils.isNotBlank(record.getStr("zl"))) {
            userDesc.append("[资历]").append(record.getStr("zl"));
            userDesc.append("<br>");
        }
        if (StringUtils.isNotBlank(record.getStr("zy2"))) {
            userDesc.append("[资源]").append(record.getStr("zy2"));
            userDesc.append("<br>");
        }
        userDesc.append("<hr>");
        userDesc.append(record.getStr("desc"));
        userExtendVo.setDesc(userDesc.toString());
        int productType = record.getInt("product_type");
        String productServiceName = record.getStr("product_service_name");


        String orgTypeName = record.getStr("orgTypeName");
        String org = record.getStr("organization");
        userExtendVo.setOrgName(orgTypeName);

        StringBuffer product = new StringBuffer().append("(").append(productType == 1 ? "产品" : "服务")
                .append(")").append(productServiceName);
        product.append("<br>");
        if (StringUtils.isNotBlank(record.getStr("industry_ranking"))) {
            product.append(record.getStr("industry_ranking"));
            product.append("<br>");
        }
        if (StringUtils.isNotBlank(record.getStr("qualification"))) {
            product.append(record.getStr("qualification"));
        }
        userExtendVo.setOrg(product.toString());
        userExtendVo.setCareer(StringUtils.isNotBlank(record.getStr("career")) ? record.getStr("career").replace("/", "<br>") : "");
        userExtendVo.setSchool(StringUtils.isNotBlank(record.getStr("school")) ? record.getStr("school").replace("|", "<br>") : "");
        return userExtendVo;
    }


    /**
     * 创建用户
     *
     * @param userInfo 用户详细信息
     */
    private int createUserLogin(UserInfo userInfo, HttpServletRequest request) {
        UserLogin userLogin = new UserLogin();
        String ip = NetKit.getRealIp(request);
        userLogin.setLastLoginIp(ip);
        userLogin.setLastLoginTime(DateTimeKit.nowLong());
        userLogin.setUsername(userInfo.getMobile());
        userLogin.setCreateTime(DateTimeKit.nowLong());
        return userLoginService.saveRtId(userLogin);
    }

    /**
     * 处理userinfo
     * 处理行业/职业关联关系
     *
     * @param userInfo 用户详细信息
     */
    private void processUserInfo(UserInfo userInfo, List<Integer> careerIds) {
        String domain = userInfo.getDomain();
        String professional = userInfo.getProfessional();

        // 处理行业（领域）
        if (StringUtils.isNotBlank(domain)) {
            // 先删除该用户所有领域信息
            userDomainService.deleteBy("user_id = #{userId}", Record.create().set("userId", userInfo.getUserId()));
            String[] domains = domain.split("\\|");
            for (String c : domains) {
                if (StringUtils.isNotBlank(c)) {
                    String[] ss = c.split(",");
                    int domainId = Integer.parseInt(ss[0]);
                    int pid = Integer.parseInt(ss[1]);
                    String name = ss[2];

                    UserDomain ud = new UserDomain();
                    ud.setUserId(userInfo.getUserId());
                    ud.setDomainId(domainId);
                    ud.setPid(pid);
                    ud.setName(name);
                    userDomainService.save(ud);
                }
            }
        }

        // ---------------------- 处理专业 -------------------------
        if (StringUtils.isNotBlank(professional)) {
            // 先删除该用户所有专业信息
            userprofessionalService.deleteBy("user_id = #{userId}", Record.create().set("userId", userInfo.getUserId()));
            String[] professionals = professional.split("\\|");
            String professionalLevel = userInfo.getProfessionalLevel();
            String[] professionallevels = null;
            if (StringUtils.isNotBlank(professionalLevel)) {
                professionallevels = userInfo.getProfessionalLevel().split("\\+");
            }
            for (int i = 0; i < professionals.length; i++) {
                String c = professionals[i];
                if (StringUtils.isNotBlank(c)) {
                    String[] ss = c.split(",");
                    int proId = Integer.parseInt(ss[0]);
                    int pid = Integer.parseInt(ss[1]);
                    String name = ss[2];
                    String level = "";
                    if (professionallevels != null) {
                        level = professionallevels[i];
                    }
                    UserProfessional up = new UserProfessional();
                    up.setUserId(userInfo.getUserId());
                    up.setProId(proId);
                    up.setProName(name);
                    up.setPid(pid);
                    up.setLevel(level);
                    userprofessionalService.save(up);
                }
            }
        }

        // ---------------------------处理事业状态------------------------
        if (StringUtils.isNotBlank(userInfo.getCareer())) {
            // 先删除该用户所有事业状态
            userCareerService.deleteBy("user_id = #{userId}", Record.create().set("userId", userInfo.getUserId()));
            if (CollectionKit.isNotEmpty(careerIds)) {
                UserinfoCareer career;
                for (Integer careerId : careerIds) {
                    career = new UserinfoCareer();
                    career.setCareerId(careerId);
                    career.setUserId(userInfo.getUserId());
                    career.setCreateTime(DateTimeKit.nowLong());
                    userCareerService.save(career);
                }
            }
        }
    }

    /**
     * 新增
     *
     * @param userInfo 用户详细信息
     */
    private void _save(UserInfo userInfo) {
        this.save(userInfo);
    }

    private void domainAndProfessional(UserInfo userInfo) {
        String domain = userInfo.getDomain();
        String domainName = null;
        if (StringUtils.isNotBlank(domain)) {
            String[] domains = domain.split("\\|");
            StringBuffer buffer = new StringBuffer();
            for (String c : domains) {
                if (StringUtils.isNotBlank(c)) {
                    String[] ss = c.split(",");
                    String name = ss[2];
                    buffer.append(name).append("/");
                }
            }
            domainName = buffer.substring(0, buffer.length() - 1);
        }

        String professional = userInfo.getProfessional();
        String professionalName = null;
        // ---------------------- 处理专业-------------------------
        if (StringUtils.isNotBlank(professional)) {
            String[] professionals = professional.split("\\|");
            StringBuffer professionalBuffer = new StringBuffer();
            for (String c : professionals) {
                if (StringUtils.isNotBlank(c)) {
                    String[] ss = c.split(",");
                    String name = ss[2];
                    professionalBuffer.append(name).append("/");
                }
            }
            professionalName = professionalBuffer.substring(0, professionalBuffer.length() - 1);
        }

        // ----------------------处理事业状态-------------------------
        userInfo.setDomain(domainName);
        userInfo.setProfessional(professionalName);
        userInfo.setCreateTime(DateTimeKit.nowLong());
    }

    /**
     * 计算用户资料完善百分比
     *
     * @return 用户资料完善百分比
     */
    private int per(UserInfo userinfo) {
        int per = 0;
        if (StringUtils.isNotBlank(userinfo.getUsername())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getAvater())) {
            per += 5;
        }
        if (userinfo.getAgeIntervalId() != null) {
            per += 5;
        }
        if (userinfo.getGender() != null) {
            per += 5;
        }
        if (userinfo.getProvinceId() != null && userinfo.getCityId() != null) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getSchool())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getMobile())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getCareer())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getDomain())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getOrganization())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getProductService()) && userinfo.getProductType() != null) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getIndustryRanking())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getQualification())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getProfessional())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getProfessionalLevel())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getZy()) || StringUtils.isNotBlank(userinfo.getSc())
                || StringUtils.isNotBlank(userinfo.getZl()) || StringUtils.isNotBlank(userinfo.getZy2())) {
            per += 5;
        }
        if (StringUtils.isNotBlank(userinfo.getKeyWord())) {
            per += 10;
        }
        if (StringUtils.isNotBlank(userinfo.getDesc())) {
            per += 10;
        }
        return per;
    }

    /**
     * 编辑
     *
     * @param userinfo 用户详细信息
     */
    private void _update(UserInfo userinfo) {
        UserInfo _info = this.findByUserId(userinfo.getUserId());
        if (StringUtils.isNotBlank(userinfo.getUsername())) {
            _info.setUsername(userinfo.getUsername());
        }
        if (StringUtils.isNotBlank(userinfo.getAvater())) {
            _info.setAvater(userinfo.getAvater());
        }
        if (userinfo.getAgeIntervalId() != null) {
            _info.setAgeIntervalId(userinfo.getAgeIntervalId());
            _info.setAge(userinfo.getAge());
        }
        if (userinfo.getGender() != null) {
            _info.setGender(userinfo.getGender());
        }
        if (userinfo.getProvinceId() != null && userinfo.getCityId() != null) {
            _info.setProvinceId(userinfo.getProvinceId());
            _info.setCityId(userinfo.getCityId());
            _info.setProvinceCity(userinfo.getProvinceCity());
        }
        if (StringUtils.isNotBlank(userinfo.getSchool())) {
            _info.setSchool(userinfo.getSchool());
        }
        if (StringUtils.isNotBlank(userinfo.getMobile())) {

        }
        if (StringUtils.isNotBlank(userinfo.getCareer())) {
            _info.setCareer(userinfo.getCareer());
        }
        if (StringUtils.isNotBlank(userinfo.getDomain())) {
            _info.setDomain(userinfo.getDomain());
        }
        if (userinfo.getOrgType() != null && StringUtils.isNotBlank(userinfo.getOrganization())) {
            _info.setOrgType(userinfo.getOrgType());
            _info.setOrganization(userinfo.getOrganization());
            _info.setOrgIsOpen(userinfo.getOrgIsOpen());
        }
        if (StringUtils.isNotBlank(userinfo.getProductService()) && userinfo.getProductType() != null) {
            _info.setProductType(userinfo.getProductType());
            _info.setProductService(userinfo.getProductService());
        }
        if (StringUtils.isNotBlank(userinfo.getIndustryRanking())) {
            _info.setIndustryRanking(userinfo.getIndustryRanking());
        }
        if (StringUtils.isNotBlank(userinfo.getQualification())) {
            _info.setQualification(userinfo.getQualification());
        }
        if (StringUtils.isNotBlank(userinfo.getProfessional())) {
            _info.setProfessional(userinfo.getProfessional());
        }
        if (StringUtils.isNotBlank(userinfo.getZy()) || StringUtils.isNotBlank(userinfo.getSc())
                || StringUtils.isNotBlank(userinfo.getZl()) || StringUtils.isNotBlank(userinfo.getZy2())) {
            _info.setZy(StringUtils.isNotBlank(userinfo.getZy()) ? userinfo.getZy() : "");
            _info.setSc(StringUtils.isNotBlank(userinfo.getSc()) ? userinfo.getSc() : "");
            _info.setZl(StringUtils.isNotBlank(userinfo.getZl()) ? userinfo.getZl() : "");
            _info.setZy2(StringUtils.isNotBlank(userinfo.getZy2()) ? userinfo.getZy2() : "");
        }
        if (StringUtils.isNotBlank(userinfo.getKeyWord())) {
            _info.setKeyWord(userinfo.getKeyWord());
        }
        if (StringUtils.isNotBlank(userinfo.getDesc())) {
            _info.setDesc(userinfo.getDesc());
        }
        _info.setPer(userinfo.getPer());
        this.update(_info);
    }

    /**
     * 改变用户状态
     *
     * @param id         用户id
     * @param bannedTime 时间
     * @param content    原因
     * @param status     状态
     */
    @Override
    public void banned(Integer id, Integer bannedTime, String content, Integer status) {
        UserLogin userLogin = userLoginService.findById(id);
        Long time = 0L;
        Long day = 86400000L;
        if (bannedTime != null) {
            switch (bannedTime) {
                case 1:
                    time = day;
                    break;
                case 2:
                    time = 2L * day;
                    break;
                case 3:
                    time = 7L * day;
                    break;
                case 4:
                    time = 14L * day;
                    break;
                case 5:
                    time = 30L * day;
                    break;
                case 6:
                    time = 60L * day;
                    break;
                case 7:
                    time = -2L;
                    break;
            }
            if (bannedTime != 7) {
                time = System.currentTimeMillis() + time;
            }
            System.out.println(time);
            userLogin.setUnlockTime(time);
            userLogin.setContent(content);
        } else {
            userLogin.setUnlockTime(-1L);
            userLogin.setContent(" ");
        }
        userLogin.setStatus(status);
        userLoginService.update(userLogin);

    }

    @Override
    public void sendMessage(Integer id, Integer sendNum, Long sendData, String title, String content) {
        if (id != null) {
            //给一个组织发送信息
            System.out.println("----id----");
            System.out.println(id);
            System.out.println("----id----");

        } else {
            //给查询结果的所有组织
            List<Integer> ids = (List<Integer>) ShiroKit.getSession().getAttribute("userInfoIds");
            System.out.println("----ids----");
            for (Integer _id : ids) {
                System.out.println(_id);
            }
            System.out.println("----ids----");
        }
    }

    @Override
    public List<UserVo> findByKeyWord(Integer userId, String keyWord) {
        return null;
    }

    @Transactional
    @Override
    public void createGrouping(Integer userId, String name, String userIds) {
        UserFriendGrouping ufg = new UserFriendGrouping();
        ufg.setUserId(userId);
        ufg.setName(name);
        ufg.setIsDefault(2);
        Integer newId = userFriendGroupingService.saveRtId(ufg);

        if (StringUtils.isNotBlank(userIds)) {
            joinToGrouping(userId, userIds, newId);
        }
    }


    /**
     * 修改分组名称
     *
     * @param userId     用户ID
     * @param groupingId 分组ID
     * @param name       名字
     */
    @Override
    public void updateGrouping(Integer userId, Integer groupingId, String name) {
        String sql = "select count(id) counts from tb_user_friend_grouping where id = #{groupingId} and user_id = #{userId}";
        Record record = Db.init().selectOne(sql, Record.create().set("groupingId", groupingId).set("userId", userId));
        int counts = record.getInt("counts");
        if (counts > 0) {
            Db.init().update("update tb_user_friend_grouping set name = #{name} where id = #{groupingId}",
                    Record.create().set("name", name).set("groupingId", groupingId));
        }
    }

    @Override
    public void joinToGrouping(Integer userId, String userIds, Integer groupingId) {
        if (StringUtils.isNotBlank(userIds)) {
            String[] ids = userIds.split(",");
            Ufgm ufgm;
            for (String id : ids) {
                if (StringUtils.isNotBlank(id)) {
                    ufgm = new Ufgm();
                    ufgm.setUfgId(groupingId);
                    ufgm.setFriendId(Integer.parseInt(id));
                    ufgmService.save(ufgm);
                }
            }
        }
    }

    /**
     * 查询分组用户列表
     *
     * @param groupingId 分组ID
     * @return uservos
     */
    @Override
    public List<UserVo> findUserListByGroupingId(Integer groupingId) {
        String sql = Blade.dao().getScript("UserInfo.findUserListByGroupig").getSql();
        Record record = Record.create().set("groupingId", groupingId);
        List<Record> records = Db.init().selectList(sql, record);
        List<UserVo> userVos = new ArrayList<>();
        for (Record record1 : records) {
            UserVo userVo = Convert.recordToVo(record1);
            userVo.setSameKeyList(Convert.labelToSameKeyList(record1.getStr("label")));
            userVos.add(userVo);
        }
        return userVos;
    }

    @Override
    public List<UserVo> findUserListByDefaultId(Integer userId, Integer defaultId) {
        String text = null;
        switch (defaultId) {
            case 1:
                text = "熟人";
                break;
            case 2:
                text = "同校";
                break;
            case 3:
                text = "同组织";
                break;
        }
        String params = "ui.user_id userId,\n" +
                "    ui.username,\n" +
                "    ui.avater,\n" +
                "    ui.mobile,\n" +
                "    ui.province_id province,\n" +
                "    ui.city_id city,\n" +
                "    ui.school,\n" +
                "    ui.province_city provinceCity,\n" +
                "    ui.domain,\n" +
                "    ui.key_word keyWord,\n" +
                "    ui.organization,\n" +
                "    ui.per,\n" +
                "    ui.career,\n" +
                "    ui.professional,\n" +
                "    ui.desc";
        String sql = "SELECT  " + params + " AS counts,'熟人' AS `name` FROM tb_user_friend uf left join tb_user_info ui on uf.friend_id = ui.user_id WHERE uf.`user_id` = #{userId} AND uf.`label` LIKE CONCAT('%', #{text},'%')";
        List<Record> recordList = Db.init().selectList(sql, Record.create().set("userId", userId).set("text", text));
        List<UserVo> userVos = new ArrayList<>();
        for (Record record : recordList) {
            UserVo userVo = Convert.recordToVo(record);
            userVo.setSameKeyList(Convert.labelToSameKeyList(record.getStr("label")));
            userVos.add(userVo);
        }
        return userVos;
    }


    /**
     * 删除用户分组
     *
     * @param userId     用户ID
     * @param groupingId 分组ID
     */
    @Transactional
    @Override
    public void deleteGrouping(Integer userId, Integer groupingId) {
        ufgmService.deleteBy("ufg_id = #{ufgId}", Record.create().set("ufgId", groupingId));
        userFriendGroupingService.delete(groupingId);
    }

    /**
     * 查询默认分组信息
     *
     * @param usereId 用户ID
     * @return record
     */
    @Override
    public List<Record> findDefaultGrouping(Integer usereId) {
        String sql =
                "SELECT COUNT(*) AS counts,'熟人' AS `name` FROM tb_user_friend uf WHERE uf.`user_id` = #{userId} AND uf.`label` LIKE CONCAT('%', '熟人','%')\n" +
                        "UNION ALL\n" +
                        "SELECT COUNT(*) AS counts,'校友' AS `name` FROM tb_user_friend uf WHERE uf.`user_id` = #{userId} AND uf.`label` LIKE CONCAT('%', '校友','%')\n" +
                        "UNION ALL\n" +
                        "SELECT COUNT(*) AS counts, '同组织' AS `name` FROM tb_user_friend uf WHERE uf.`user_id` = #{userId} AND uf.`label` LIKE CONCAT('%', '同组织','%')";
        return Db.init().selectList(sql, Record.create().set("userId", usereId));
    }

    @Override
    public List<Record> findCustomGrouping(Integer userId) {
        String sql = "SELECT COUNT(ufgm.`friend_id`) counts,ufg.`id`,IFNULL(ufg.`name`, '') `name` FROM `tb_user_friend_grouping` ufg \n" +
                "LEFT JOIN `tb_user_friend_grouping_member` ufgm ON ufg.id = ufgm.`ufg_id` \n" +
                "WHERE ufg.`user_id` = #{userId} GROUP BY ufg.`id`";
        return Db.init().selectList(sql, Record.create().set("userId", userId));
    }

    /**
     * 查询分组首页
     *
     * @param userId 用户ID
     * @return records
     */
    @Override
    public List<Record> findIndexGrouping(Integer userId) {
//        List<Record> defaultRecords = findDefaultGrouping(userId);
        List<Record> customRecods = findCustomGrouping(userId);
        return customRecods;
    }

    /**
     * 对用户感兴趣
     *
     * @param userId    当前用户ID
     * @param toUserIds 感兴趣用户ID,多个ID用","号分割
     */
    @Transactional
    @Override
    public void interest(Integer userId, String toUserIds) {
        String[] toUserIdss = toUserIds.split(",");
        for (String toUserId : toUserIdss) {
            String where = "user_id = #{userId} and to_user_id = #{toUserId}";
            Record record = Record.create().set("userId", userId).set("toUserId", toUserId);
            UserInterest userInterest = userInterestService.findFirstBy(where, record);
            if (userInterest != null) {
                userInterestService.updateBy("status = 0", where, record);
            } else {
                userInterest = new UserInterest();
                userInterest.setStatus(0);
                userInterest.setUserId(userId);
                userInterest.setToUserId(Integer.parseInt(toUserId));
                userInterest.setCreateTime(DateTimeKit.nowLong());
                userInterestService.save(userInterest);
            }
        }
    }

    /**
     * 查看交集
     *
     * @param userId   当前用户ID
     * @param toUserId 目标用户ID
     * @return record
     */
    @Override
    public Record intersection(Integer userId, Integer toUserId) {
        String sql = "SELECT uf.friend_id FROM tb_user_friend uf INNER JOIN tb_user_friend uf2 ON uf.`friend_id` = uf2.`friend_id` " +
                "AND uf2.`user_id` = #{toUserId} WHERE uf.`user_id` = #{userId} and uf.type = 2 group by uf.friend_id";
        List<Record> recordList = Db.init().selectList(sql, Record.create().set("userId", userId).set("toUserId", toUserId));
        String sql2 = "select ui.user_id userId, ui.username FROM tb_user_info ui where ui.user_id in (#{ids})";
        StringBuffer ids = new StringBuffer();
        for (Record record : recordList) {
            ids.append(record.getStr("friend_id")).append(",");
        }
        List<Record> userList;
        if (ids.length() > 0) {
            userList = Db.init().selectList(sql2, Record.create().set("ids", ids.substring(0, ids.length() - 1)));
        } else {
            userList = new ArrayList<>();
        }
        String sql3 = "SELECT ug.group_id FROM tb_user_group ug inner join tb_user_group ug2 on ug.`group_id` = ug2.`group_id`" +
                " and ug2.`user_id` = #{toUserId} WHERE ug.`user_id` = #{userId} group by ug.`group_id`";
        List<Record> groupRecordList = Db.init().selectList(sql3, Record.create().set("userId", userId).set("toUserId", toUserId));
        StringBuffer ids2 = new StringBuffer();
        for (Record record : groupRecordList) {
            ids2.append(record.getStr("group_id")).append(",");
        }
        String sql4 = "SELECT id,`name` FROM tb_group WHERE id IN (#{ids2})";
        List<Record> groupList;
        if (ids2.length() > 0) {
            groupList = Db.init().selectList(sql4, Record.create().set("ids2", ids2.substring(0, ids2.length() - 1)));
        } else {
            groupList = new ArrayList<>();
        }
        Record record = Record.create();
        return record.set("uservos", userList).set("groupvos", groupList);
    }

    @Override
    public UserVo findUserDetailWithUa(Integer userId, Integer toUserId) {
        String sql = Blade.dao().getScript("UserInfo.userInfoDetailWithUa").getSql();
        Record record = Db.init().selectOne(sql, Record.create().set("userId", userId).set("toUserId", toUserId));
        UserVo userVo = Convert.recordToVo(record);
        Convert.setUserVoStatus(userVo, record, userId);
        return userVo;
    }

    @Transactional
    @Override
    public void updateMobile(String mobile, Integer userId) throws UserExitsException {
        UserInfo userInfo = this.findFirstBy("mobile = #{mobile}", Record.create().set("mobile", mobile));
        if (userInfo != null)
            throw new UserExitsException();
        Record record = Record.create().set("mobile", mobile).set("userId", userId);
        this.updateBy("mobile = #{mobile}", "user_id = #{userId}", record);
        userLoginService.updateBy("login_username = #{mobile}", "id = #{userId}", record);
    }

    /**
     * 加入组织用户列表
     *
     * @param userId 当前用户ID
     * @return uservolist
     */
    @Override
    public List<UserVo> findUserListByJoinGroup(Integer userId) throws UserIsNotManagerException {
        Integer groupId = findGroupIdByUserId(userId);
        if (groupId == null) {
            throw new UserIsNotManagerException();
        }
        String sql = Blade.dao().getScript("UserInfo.userlistByjoinGroup").getSql();
        List<Record> recordList = Db.init().selectList(sql, Record.create().set("groupId", groupId));
        List<UserVo> voList = new ArrayList<>();
        for (Record record : recordList) {
            UserVo userVo = Convert.recordToVo(record);
            userVo.setPaied(record.getInt("paied"));
            userVo.setValidateInfo(record.getStr("validateInfo"));
            voList.add(userVo);
        }
        return voList;
    }

    /**
     * 查询该用户身份为干事的组织ID
     *
     * @param userId 用户ID
     * @return groupId
     */
    @Override
    public Integer findGroupIdByUserId(Integer userId) {
        String sql = "select group_id from tb_user_group ug where ug.user_id = #{userId} and ug.vip_type = 2";
        Record record = Db.init().selectOne(sql, Record.create().set("userId", userId));
        return record == null ? null : record.getInt("group_id");
    }

    /**
     * 引荐用户列表
     *
     * @param userId 用户ID
     * @return IntroduceUserVolist
     */
    @Override
    public List<IntroduceUserVo> findIntroduceUserVoList(Integer userId) throws UserIsNotManagerException {
        Integer groupId = findGroupIdByUserId(userId);
        if (groupId == null) {
            throw new UserIsNotManagerException();
        }
        String sql = Blade.dao().getScript("UserInfo.introduceUserList").getSql();
        List<Record> list = Db.init().selectList(sql, Record.create().set("groupId", groupId));
        return Convert.recordToVoOfIntroduces(list);
    }

    /**
     * 设置组织是否允许加入
     *
     * @param userId 当前用户ID
     * @param status 状态  1:开放 2:关闭
     */
    @Override
    public void setIsJoin(Integer userId, Integer status) throws UserIsNotManagerException {
        Integer groupId = findGroupIdByUserId(userId);
        if (groupId == null) {
            throw new UserIsNotManagerException();
        }
        Db.init().update("update tb_group set is_join = #{status} where id = #{groupId}", Record.create().set("groupId", groupId).set("status", status));
    }

    /**
     * 设置组织是否允许引荐
     *
     * @param userId 当前用户ID
     * @param status 状态  1:允许 2:拒绝
     */
    @Override
    public void setisIntroduce(Integer userId, Integer status) throws UserIsNotManagerException {
        Integer groupId = findGroupIdByUserId(userId);
        if (groupId == null) {
            throw new UserIsNotManagerException();
        }
        Db.init().update("update tb_group set is_introduce = #{status} where id = #{groupId}", Record.create().set("groupId", groupId).set("status", status));
    }

    /**
     * 判断用户是否有默认分组
     *
     * @param userId 当前用户ID
     * @return boolean
     */
    @Override
    public boolean isHaveDefaultGrouping(Integer userId) {
        String sql = "select count(id) counts from tb_user_friend_grouping where user_id = #{userId} and is_default = 1";
        Record record = Db.init().selectOne(sql, Record.create().set("userId", userId));
        int counts = record.getInt("counts");
        return counts > 0;
    }

    /**
     * 新增默认分组
     *
     * @param userId 当前用户ID
     */
    @Transactional
    @Override
    public void createDefaultGrouping(Integer userId) {
        UserFriendGrouping ufg = new UserFriendGrouping();
        ufg.setUserId(userId);
        ufg.setIsDefault(1);
        ufg.setName("熟人");
        userFriendGroupingService.save(ufg);
        ufg.setName("校友");
        userFriendGroupingService.save(ufg);
        ufg.setName("同组织");
        userFriendGroupingService.save(ufg);
    }

    /**
     * 组织后台-加入组织审核
     *
     * @param userId    当前用户ID
     * @param groupId   组织ID
     * @param toUserIds 目标用户ID
     */
    @Override
    public void groupServerJoin(Integer userId, Integer groupId, String toUserIds, Integer status) {
        Record record = scanService.findMemeberByUserId(userId);
        int _groupId = record.getInt("groupId");
        if (_groupId == groupId) {
            if (StringUtils.isBlank(toUserIds)) {
                return;
            }
            String[] toUseridss = toUserIds.split(",");
            for (String toUserId : toUseridss) {
                Record record1 = Db.init().selectOne("select id from tb_group_approval ga where ga.group_id = #{groupId} and ga.user_id = #{userId} and ga.status = 1",
                        Record.create().set("groupId", groupId).set("userId", toUserId));
                int gaId = record1.getInt("id");
                groupApprovalService.updateStatus(gaId, status);
            }
        }
    }

    /**
     * 组织后台-引荐审核
     *
     * @param userId 当前用户ID
     * @param augIds 申请记录ID
     */
    @Override
    public void groupServerIntroduce(Integer userId, Integer groupId, String augIds, Integer status) {
        Record record = scanService.findMemeberByUserId(userId);
        int _groupId = record.getInt("groupId");
        if (_groupId == groupId) {
            if (StringUtils.isBlank(augIds)) {
                return;
            }
            String[] augIdss = augIds.split(",");
            for (String augId : augIdss) {
                augService.updateStatus(Integer.parseInt(augId), status);
            }
        }
    }

    /**
     * 查询用户消费记录
     *
     * @param userId 当前用户ID
     * @return ConsumptionRecordSuperVo
     */
    @Override
    public ConsumptionRecordSuperVo findConsumptionRecordByUserId(Integer userId) {

        String sql = Blade.dao().getScript("Order.findListByUserId").getSql();
        List<Record> list = Db.init().selectList(sql, Record.create().set("userId", userId));
        List<ConsumptionRecordVo> consumptionRecordVos = new ArrayList<>();
        double allMoney = 0;
        for (Record record : list) {
            ConsumptionRecordVo vo = new ConsumptionRecordVo();
            int orderType = record.getInt("order_type");
            if (orderType == 1 || orderType == 2) {
                vo.setTitle(TITLE_CR_VIP);
            } else if (orderType == 3) {
                vo.setTitle(TITLE_CR_INTEREST);
            } else if (orderType == 4) {
                vo.setTitle(TITLE_CR_ACQUAINTANCE);
            }
            vo.setCounts(record.getInt("counts"));
            vo.setOrderNo(record.getStr("order_no"));
            vo.setGroupName(record.getStr("groupName"));
            vo.setMoney(Double.parseDouble(record.get("order_amount").toString()));
            vo.setCreateTime(record.getLong("create_time"));
            vo.setStatus(record.getInt("status"));
            vo.setFlow(record.getInt("flow"));
            int flag = 1;
            if (vo.getFlow() == 1) {
                flag = -1;
            }
            consumptionRecordVos.add(vo);
            allMoney += (Double.parseDouble(record.get("order_amount").toString()) * flag);
        }
        ConsumptionRecordSuperVo superVo = new ConsumptionRecordSuperVo();
        superVo.setList(consumptionRecordVos);
        superVo.setMoney(allMoney);
        return superVo;
    }

    /**
     * 是否达到用户感兴趣人数上限
     * @param userId 当前用户ID
     * @return boolean
     */
    @Override
    public boolean isOverInterestNum(Integer userId) {
        UserInfoExtend userInfoExtend = userInfoExtendService.findByUserId(userId);
        if (userInfoExtend.getId() == null) userInfoExtend.setInterestCount(INTEREST_COUNTS);
        return userInfoExtend.getInterestCount() <= findUserAndGroupInterestNumByUserId(userId);
    }

    public int findUserAndGroupInterestNumByUserId(Integer userId) {
        int usercount = userInterestService.count("user_id = #{userId} and status = 0", Record.create().set("userId", userId));
        int groupcount = groupInterestService.count("user_id = #{userId} and status = 0", Record.create().set("userId", userId));
        return (usercount + groupcount);
    }

    public int findAcquaintancesNumByUserId(Integer userId) {
        return userFriendService.count("user_id = #{userId} and type = 2 and status = 0", Record.create().set("userId", userId));
    }

    /**
     * 是否达到用户熟人人数上限
     * @param userId 当前用户ID
     * @return boolean
     */
    @Override
    public boolean isOverAcquaintances(Integer userId) {
        UserInfoExtend userInfoExtend = userInfoExtendService.findByUserId(userId);
        if (userInfoExtend.getId() == null) userInfoExtend.setAcquaintanceCount(ACQUAINTANCE_COUNTS);
        return userInfoExtend.getAcquaintanceCount() <= findAcquaintancesNumByUserId(userId);
    }


    @Autowired
    private ScanService scanService;
    @Autowired
    private GroupApprovalService groupApprovalService;
}
