package com.smallchill.web.service.impl;

import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.shiro.ShiroKit;
import com.smallchill.core.toolbox.Record;
import com.smallchill.core.toolbox.grid.JqGrid;
import com.smallchill.core.toolbox.kit.DateTimeKit;
import com.smallchill.core.toolbox.support.BladePage;
import com.smallchill.web.model.Aug;
import com.smallchill.web.model.Group;
import com.smallchill.web.model.UserApproval;
import com.smallchill.web.service.AugService;
import com.smallchill.web.service.UserApprovalService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.smallchill.core.base.service.BaseService;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by Blade.
 * 2016-11-08 17:59:49
 */
@Service
public class AugServiceImpl extends BaseService<Aug> implements AugService {

    @Autowired
    UserApprovalService userApprovalService;

    @Override
    public void updateStatus(Integer id, Integer status) {
        Aug aug = this.findById(id);
        if(status==2){  //批准
            UserApproval userApproval = new UserApproval();
            userApproval.setFromUserId(aug.getFromUserId());
            userApproval.setToUserId(aug.getToUserId());
            userApproval.setIntroduceUserId(0); //无
            userApproval.setGroupId(aug.getGroupId());
            userApproval.setValidateInfo(aug.getValidateInfo());
            userApproval.setType(1); //结识
            userApproval.setStatus(1); //未处理
            userApproval.setCreateTime(DateTimeKit.nowLong());
            userApprovalService.save(userApproval);
        }
        aug.setStatus(status);
        this.update(aug);
    }

    @Override
    public List loadOne(Integer id) {
        String sql = "SELECT\n" +
                "  tua.id AS id,\n" +
                "  tua.from_user_id AS fromUserId,\n" +
                "  tua.to_user_id AS toUserId,\n" +
                "  tua.group_id AS groupId,\n" +
                "  tui.username AS userName,\n" +
                "  tui.gender AS gender,\n" +
                "  tui.age AS age,\n" +
                "  tui.province_city AS provinceCity,\n" +
                "  tui.school AS school,\n" +
                "  tui.career AS career,\n" +
                "  tui.domain AS domain,\n" +
                "  tui.professional AS professional,\n" +
                "  tui.zy AS zy,\n" +
                "  tui.sc AS sc,\n" +
                "  tui.zl AS zl,\n" +
                "  tui.zy2 AS zy2,\n" +
                "  tg.name AS groupName,\n" +
                "  tg.type AS groupType,\n" +
                "  tui.product_type AS productType,\n" +
                "  tui.industry_ranking AS industryRanking,\n" +
                "  tui.qualification AS qualification,\n" +
                "  tui.key_word AS keyWord,\n" +
                "  tug.vip_type AS vipType,\n" +
                "  tua.validate_info AS validateInfo,\n" +
                "  tua.status AS approvalStatus,\n" +
                "  DATE_FORMAT(FROM_UNIXTIME(tua.create_time/1000),'%Y-%m-%d') AS createTime\n" +
                "FROM\n" +
                "  tb_approval_user_group tua\n" +
                "LEFT JOIN tb_user_group tug ON tua.group_id = tug.group_id AND tua.to_user_id = tug.user_id\n" +
                "LEFT JOIN tb_group tg ON tua.group_id = tg.id\n" +
                "LEFT JOIN tb_user_info tui ON tui.user_id = tua.to_user_id\n" +
                "WHERE tua.id = #{id}";

        List list = Db.init().selectList(sql, Record.create().set("id",id));
        return list;
    }
}
