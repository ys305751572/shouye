package com.smallchill.api.function.service.impl;

import com.smallchill.api.function.modal.Shielding;
import com.smallchill.api.function.service.ShieldingService;
import com.smallchill.core.plugins.dao.Blade;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.toolbox.Record;
import com.smallchill.core.toolbox.kit.CollectionKit;
import com.smallchill.core.toolbox.kit.DateTimeKit;
import com.smallchill.core.toolbox.kit.MapKit;
import com.smallchill.web.model.ArticleShow;
import com.smallchill.web.service.ArticleShowService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.smallchill.core.base.service.BaseService;

import java.util.*;

/**
 * Generated by yesong.
 * 2017-02-06 11:21:13
 */
@Service
public class ShieldingServiceImpl extends BaseService<Shielding> implements ShieldingService {

    @Autowired
    private ArticleShowService articleShowService;

    @Override
    public void shieldingByArticleShowId(Integer articleShowId, Integer userId) {
        ArticleShow articleShow = articleShowService.findById(articleShowId);
        saveShielding(articleShow, userId);
        articleShowService.shielding(articleShow.getFromId(), articleShow.getToId(), articleShow.getType());
    }

    /**
     * 屏蔽列表
     *
     * @param userId 当前用户ID
     * @return list
     */
    @Override
    public List<Record> listByUserId(Integer userId) {
        String sql = Blade.dao().getScript("Shielding.listByUserId").getSql();
        return Db.init().selectList(sql, Record.create().set("userId", userId));
    }

    @Override
    public List<Record> listByUserId(List<Map> list) {
        return grouping(list);
    }

    private List<Record> grouping(List<Map> list) {
        List<Integer> userIds = new ArrayList<>();
        List<Integer> groupIds = new ArrayList<>();
        for (Map map : list) {
            if (MapKit.getInt(map, "type") == 1) {
                userIds.add(MapKit.getInt(map, "from_id"));
            } else if (MapKit.getInt(map, "type") == 2) {
                groupIds.add(MapKit.getInt(map, "from_id"));
            }
        }
        List<Record> users = new ArrayList<>();
        List<Record> groups = new ArrayList<>();
        if (CollectionKit.isNotEmpty(userIds)) {
            users = findUsers(userIds);
        }
        if (CollectionKit.isNotEmpty(groupIds)) {
            groups = findGroup(groupIds);
        }
        users.addAll(groups);
        return users;
    }

    private List<Record> findUsers(List<Integer> userIds) {
        String sql = Blade.dao().getScript("Shielding.findUsers").getSql();

        StringBuilder builder = new StringBuilder();
        for (Integer userId : userIds) {
            builder.append(userId).append(",");
        }
        return Db.init().selectList(sql, Record.create().set("ids", builder.substring(0, builder.length() - 1)));
    }

    private List<Record> findGroup(List<Integer> groupIds) {
        String sql = Blade.dao().getScript("Shielding.findGroups").getSql();

        StringBuilder builder = new StringBuilder();
        for (Integer groupId : groupIds) {
            builder.append(groupId).append(",");
        }
        return Db.init().selectList(sql, Record.create().set("ids", builder.substring(0, builder.length() - 1)));
    }

    private void saveShielding(ArticleShow articleShow, Integer userId) {
        Shielding shielding = new Shielding();
        shielding.setUserId(userId);
        if (articleShow.getType() >= 1 && articleShow.getType() <= 3) {
            shielding.setType(1);
        } else if (articleShow.getType() >= 4 && articleShow.getType() <= 5) {
            shielding.setType(2);
        } else {
            shielding.setType(3);
        }
        shielding.setCreateTime(DateTimeKit.nowLong());
        shielding.setFromId(articleShow.getFromId());
        save(shielding);
    }
}
